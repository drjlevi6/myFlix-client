var helpers = require("../../../../../../../.nvm/versions/node/v14.16.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _axios = require('axios');
  var _axiosDefault = _parcelHelpers.interopDefault(_axios);
  require("./main-view.scss");
  var _reactBootstrapContainer = require('react-bootstrap/Container');
  var _reactBootstrapContainerDefault = _parcelHelpers.interopDefault(_reactBootstrapContainer);
  var _reactBootstrapRow = require('react-bootstrap/Row');
  var _reactBootstrapRowDefault = _parcelHelpers.interopDefault(_reactBootstrapRow);
  var _reactBootstrapCol = require('react-bootstrap/Col');
  var _reactBootstrapColDefault = _parcelHelpers.interopDefault(_reactBootstrapCol);
  var _loginViewLoginView = require('../login-view/login-view');
  var _movieCardMovieCard = require('../movie-card/movie-card');
  var _movieViewMovieView = require('../movie-view/movie-view');
  var _jsxFileName = "/Users/jonathan/Documents/GitHub/portfolio_website/myFlix-client/src/components/main-view/main-view.jsx";
  class MainView extends _reactDefault.default.Component {
    constructor() {
      super();
      this.state = {
        movies: [],
        selectedMovie: null,
        user: null
      };
    }
    /*
    componentDidMount(){
    axios.get('https://drjs-myflix-app.herokuapp.com/movies')
    .then(response => {
    this.setState({   // triggers automatic re-render
    movies: response.data
    });
    })
    .catch(error => {
    console.log(error);
    });
    
    }
    */
    componentDidMount() {
      let accessToken = localStorage.getItem('token');
      if (accessToken !== null) {
        this.setState({
          user: localStorage.getItem('user')
        });
        this.getMovies(accessToken);
      }
    }
    onLoggedOut() {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      this.setState({
        user: null
      });
    }
    /*When a movie is clicked, this function is invoked and
    updates the state of the `selectedMovie` *property
    to that movie*/
    setSelectedMovie(movie) {
      this.setState({
        selectedMovie: movie
      });
    }
    /*When a user successfully logs in, this function updates
    the `user` property in state to that *particular user*/
    onLoggedIn(authData) {
      console.log("main-view.onLoggedIn.authData:", authData);
      this.setState({
        user: authData.user.Username
      });
      localStorage.setItem('token', authData.token);
      localStorage.setItem('user', authData.user.Username);
      this.getMovies(authData.token);
    }
    getMovies(token) {
      _axiosDefault.default.get('https://drjs-myflix-app.herokuapp.com/movies', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }).then(response => {
        // Assign the result to the state
        this.setState({
          movies: response.data
        });
      }).catch(function (error) {
        console.log(error);
      });
    }
    render() {
      const {movies, selectedMovie, user} = this.state;
      /*<!--If there is no user, the LoginView is rendered.
      If there is a user logged in, the user details are
      *passed as a prop to the LoginView-->*/
      if (!user) {
        return (
          /*#__PURE__*/_reactDefault.default.createElement(_loginViewLoginView.LoginView, {
            onLoggedIn: user => this.onLoggedIn(user),
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 102,
              columnNumber: 14
            }
          })
        );
      }
      // /* <!--Before the movies have been loaded
      // If the state of `selectedMovie` is not null, that
      // selected movie will be returned otherwise, all
      // *movies will be returned.--> */
      if (movies.length === 0) {
        // Why isn't the key assignment working? (typeof movies = object)
        return (
          /*#__PURE__*/_reactDefault.default.createElement("div", {
            __self: this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 112,
              columnNumber: 14
            }
          })
        );
      }
      ;
      // end return
      return (
        /*#__PURE__*/
        // <div className="main-view">
        _reactDefault.default.createElement(_reactBootstrapContainerDefault.default, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117,
            columnNumber: 7
          }
        }, selectedMovie ? /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapRowDefault.default, {
          className: "justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 119,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
          xs: 12,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 120,
            columnNumber: 15
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_movieViewMovieView.MovieView, {
          movie: selectedMovie,
          onBackClick: newSelectedMovie => {
            this.setSelectedMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 121,
            columnNumber: 17
          }
        }))) : /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapRowDefault.default, {
          className: "justify-content-md-center",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 128,
            columnNumber: 15
          }
        }, movies.map(movie => /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrapColDefault.default, {
          xs: 6,
          key: movie._id,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 130,
            columnNumber: 19
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_movieCardMovieCard.MovieCard, {
          movie: movie,
          title: movie.title,
          imagePath: movie.imagePath,
          onMovieClick: newSelectedMovie => {
            this.setSelectedMovie(newSelectedMovie);
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131,
            columnNumber: 21
          }
        })))), /*#__PURE__*/_reactDefault.default.createElement("button", {
          onClick: () => {
            this.onLoggedOut();
          },
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 142,
            columnNumber: 9
          }
        }, "Logout"))
      );
    }
  }
  exports.default = MainView;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
